version: '3.8'

services:
  web:
    build: .
    ports:
      - "8000:8000"
    environment:
      - DEBUG=False
      - ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0
      - USE_GPU=true
      - TEMP_FILE_CLEANUP_HOURS=2
      - CUDA_VISIBLE_DEVICES=0
    volumes:
      # Only temporary files volume (auto-cleaned)
      - temp_files:/app/temp
      # Static files for web serving
      - static_files:/app/static
      # Model cache (persistent for performance)
      - model_cache:/app/models
    tmpfs:
      # Use tmpfs for fast temporary storage
      - /tmp:noexec,nosuid,size=2g
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Optional: Cleanup service for automatic temp file management
  cleanup:
    build: .
    environment:
      - TEMP_FILE_CLEANUP_HOURS=2
    volumes:
      - temp_files:/app/temp
    command: >
      sh -c "while true; do
        python3 manage.py cleanup_temp_files --hours=2;
        sleep 3600;
      done"
    restart: unless-stopped
    depends_on:
      - web

  # Optional: Add Redis for caching (uncomment if needed)
  # redis:
  #   image: redis:7-alpine
  #   ports:
  #     - "6379:6379"
  #   restart: unless-stopped

  # Optional: Add PostgreSQL for production (uncomment if needed)
  # db:
  #   image: postgres:15-alpine
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data/
  #   environment:
  #     - POSTGRES_DB=imagedb
  #     - POSTGRES_USER=postgres
  #     - POSTGRES_PASSWORD=password
  #   restart: unless-stopped

volumes:
  temp_files:
    driver: local
  static_files:
    driver: local
  model_cache:
    driver: local
  postgres_data: 